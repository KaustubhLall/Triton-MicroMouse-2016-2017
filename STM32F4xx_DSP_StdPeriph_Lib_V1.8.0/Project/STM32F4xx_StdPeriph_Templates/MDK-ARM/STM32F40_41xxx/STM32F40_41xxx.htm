<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F40_41xxx\STM32F40_41xxx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F40_41xxx\STM32F40_41xxx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Oct 18 08:23:19 2017
<BR><P>
<H3>Maximum Stack Usage =        232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SearchingMode &rArr; Turn180 &rArr; FrontAlign &rArr; UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[e3]">quickSort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e3]">quickSort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[5f]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>__aeabi_ul2f</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ffltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_ul2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[fc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[fd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[fe]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ff]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[77]"></a>ADC_CommonInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_adc.o(i.ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[71]"></a>ADC_Config</STRONG> (Thumb, 248 bytes, Stack size 120 bytes, main.o(i.ADC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ADC_Config &rArr; ADC_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[7b]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[7a]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_DMARequestAfterLastTransferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[72]"></a>ADC_GPIO_Config</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, main.o(i.ADC_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[78]"></a>ADC_Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[79]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[7d]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_adc.o(i.ADC_SoftwareStartConv))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[7f]"></a>Angle</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Angle &rArr; REnc
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REnc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sBreak
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintB
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintA
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTurn
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTurn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
</UL>

<P><STRONG><a name="[82]"></a>Angular_PID</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, main.o(i.Angular_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Angular_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sBreak
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTurn
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTurn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ButtonInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, main.o(i.ButtonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ButtonInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[76]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[75]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[86]"></a>Delay_us</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, main.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Delay_us &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RF
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LF
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
</UL>

<P><STRONG><a name="[87]"></a>Disp</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(i.Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Disp &rArr; REnc_mm &rArr; REnc
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REnc_mm
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnc_mm
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[8a]"></a>EmitterInit</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, main.o(i.EmitterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EmitterInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[8b]"></a>EncoderInit</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(i.EncoderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EncoderInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetREnc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[8e]"></a>Encoder_Configration</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, main.o(i.Encoder_Configration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Encoder_Configration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[94]"></a>Error_Alert</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.Error_Alert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Error_Alert &rArr; blinkLED &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[97]"></a>FrontAlign</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, main.o(i.FrontAlign))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FrontAlign &rArr; UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_GPIO_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configration
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitterInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Config
</UL>

<P><STRONG><a name="[90]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_GPIO_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configration
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RF
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LF
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RF
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LF
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRscan</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.IRscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RF
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LF
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
</UL>

<P><STRONG><a name="[9e]"></a>IRscan_L</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.IRscan_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IRscan_L &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isqrt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan
</UL>

<P><STRONG><a name="[a0]"></a>IRscan_LF</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.IRscan_LF))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IRscan_LF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isqrt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan
</UL>

<P><STRONG><a name="[a6]"></a>IRscan_LM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.IRscan_LM))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IRscan_LM &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isqrt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSprint
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
</UL>

<P><STRONG><a name="[9f]"></a>IRscan_R</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.IRscan_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IRscan_R &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isqrt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan
</UL>

<P><STRONG><a name="[a1]"></a>IRscan_RF</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.IRscan_RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isqrt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan
</UL>

<P><STRONG><a name="[a7]"></a>IRscan_RM</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(i.IRscan_RM))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IRscan_RM &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Isqrt
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSprint
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
</UL>

<P><STRONG><a name="[b3]"></a>Ifabs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.Ifabs))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintA
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTurn
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTurn
</UL>

<P><STRONG><a name="[a8]"></a>InitializeAlles</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(i.InitializeAlles))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = InitializeAlles &rArr; ADC_Config &rArr; ADC_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motorInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configration
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitterInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>Isqrt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.Isqrt))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RF
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LF
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
</UL>

<P><STRONG><a name="[ab]"></a>LEDInit</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, main.o(i.LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[81]"></a>LEnc</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, main.o(i.LEnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnc_mm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>

<P><STRONG><a name="[88]"></a>LEnc_mm</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(i.LEnc_mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEnc_mm &rArr; LEnc
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp
</UL>

<P><STRONG><a name="[b0]"></a>LF</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.LF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LF
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
</UL>

<P><STRONG><a name="[b1]"></a>LR</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, main.o(i.LR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LR
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
</UL>

<P><STRONG><a name="[b2]"></a>LeftTurn</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, main.o(i.LeftTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LeftTurn &rArr; Angular_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ifabs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[b4]"></a>Linear_PID</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, main.o(i.Linear_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Linear_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;equal
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>Millis_Increment</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.Millis_Increment))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_GPIO_Config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configration
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmitterInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[8f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_GPIO_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configration
</UL>

<P><STRONG><a name="[73]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Config
</UL>

<P><STRONG><a name="[d7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[e2]"></a>RE</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.RE))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
</UL>

<P><STRONG><a name="[80]"></a>REnc</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, main.o(i.REnc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = REnc
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetREnc
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REnc_mm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>

<P><STRONG><a name="[89]"></a>REnc_mm</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(i.REnc_mm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = REnc_mm &rArr; REnc
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REnc
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp
</UL>

<P><STRONG><a name="[b5]"></a>RF</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, main.o(i.RF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RF
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
</UL>

<P><STRONG><a name="[8c]"></a>ResetLEnc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.ResetLEnc))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEnc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInit
</UL>

<P><STRONG><a name="[8d]"></a>ResetREnc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.ResetREnc))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REnc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderInit
</UL>

<P><STRONG><a name="[b6]"></a>RightTurn</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, main.o(i.RightTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RightTurn &rArr; Angular_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ifabs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>SearchingMode</STRONG> (Thumb, 588 bytes, Stack size 48 bytes, main.o(i.SearchingMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SearchingMode &rArr; Turn180 &rArr; FrontAlign &rArr; UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetREnc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLEnc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintB
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintA
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLinear_PID
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCell
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSprint
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintB
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTurn
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTurn
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>SprintA</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, main.o(i.SprintA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SprintA &rArr; Linear_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ifabs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>SprintB</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, main.o(i.SprintB))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SprintB &rArr; Linear_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ifabs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimingDelay_Decrement
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Millis_Increment
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SysTick_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Init &rArr; Error_Alert &rArr; blinkLED &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Alert
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[a9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>TIM4_Config</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, main.o(i.TIM4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = TIM4_Config &rArr; TIM4_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[c4]"></a>TIM4_GPIO_Config</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, main.o(i.TIM4_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM4_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[ce]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[93]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configration
</UL>

<P><STRONG><a name="[92]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_EncoderInterfaceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configration
</UL>

<P><STRONG><a name="[c6]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[c7]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[c8]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[c9]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[ca]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[cb]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[cc]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[cd]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[91]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Configration
</UL>

<P><STRONG><a name="[c5]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Config
</UL>

<P><STRONG><a name="[c1]"></a>TimingDelay_Decrement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.TimingDelay_Decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[bf]"></a>Turn180</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, main.o(i.Turn180))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Turn180 &rArr; FrontAlign &rArr; UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintB
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCell
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintB
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTurn
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetREnc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLEnc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[ad]"></a>USART_Config</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, main.o(i.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[e7]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[cf]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[d2]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[d0]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b9]"></a>UpdateFloodfill</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, main.o(i.UpdateFloodfill))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UpdateFloodfill &rArr; UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currCell
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCell
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LF
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[98]"></a>UpdateSensors</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.UpdateSensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;currCell
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSprint
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[101]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[95]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Alert
</UL>

<P><STRONG><a name="[102]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[103]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[105]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[106]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[96]"></a>blinkLED</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, main.o(i.blinkLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = blinkLED &rArr; Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Alert
</UL>

<P><STRONG><a name="[b8]"></a>canSprint</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.canSprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = canSprint &rArr; UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCell
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[bc]"></a>checkCell</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.checkCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = checkCell
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSprint
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[a3]"></a>collecting_IR_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.collecting_IR_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickSort
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RF
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_R
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LF
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_L
</UL>

<P><STRONG><a name="[d8]"></a>currCell</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.currCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = currCell
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
</UL>

<P><STRONG><a name="[9c]"></a>curve</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = curve &rArr; motor
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sBreak
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintB
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTurn
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTurn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
</UL>

<P><STRONG><a name="[ed]"></a>enterableCells</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, main.o(i.enterableCells))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = enterableCells
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[84]"></a>equal</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, main.o(i.equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = equal
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ifabs
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
</UL>

<P><STRONG><a name="[ee]"></a>findMinDistance</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.findMinDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = findMinDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[5f]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fputc &rArr; UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[e4]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
</UL>

<P><STRONG><a name="[9b]"></a>halt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = halt &rArr; motor
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
</UL>

<P><STRONG><a name="[99]"></a>initAngular_PID</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.initAngular_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initAngular_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sBreak
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintB
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTurn
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTurn
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
</UL>

<P><STRONG><a name="[be]"></a>initLinear_PID</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.initLinear_PID))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initLinear_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintB
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[ba]"></a>initSprintA</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, main.o(i.initSprintA))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = initSprintA &rArr; initLinear_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLinear_PID
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[bb]"></a>initSprintB</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i.initSprintB))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = initSprintB &rArr; initLinear_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLinear_PID
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
</UL>

<P><STRONG><a name="[e8]"></a>interrP</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(i.interrP))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = main &rArr; SearchingMode &rArr; Turn180 &rArr; FrontAlign &rArr; UpdateSensors &rArr; IRscan &rArr; IRscan_RF &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetREnc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetLEnc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sBreak
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrP
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSprintA
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateSensors
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SprintA
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e1]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
</UL>

<P><STRONG><a name="[83]"></a>micros</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, main.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = micros
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLinear_PID
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
</UL>

<P><STRONG><a name="[9a]"></a>millis</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;straightPhaseFix
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sRightTurn
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sLeftTurn
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sBreak
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn180
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchingMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RightTurn
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeftTurn
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LR
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LF
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrontAlign
</UL>

<P><STRONG><a name="[e5]"></a>motor</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, main.o(i.motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = motor
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
</UL>

<P><STRONG><a name="[ae]"></a>motorInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.motorInit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitializeAlles
</UL>

<P><STRONG><a name="[d9]"></a>move</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, main.o(i.move))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = move &rArr; enterableCells
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stepAtDirection
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findMinDistance
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterableCells
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFloodfill
</UL>

<P><STRONG><a name="[f0]"></a>partition</STRONG> (Thumb, 72 bytes, Stack size 28 bytes, main.o(i.partition))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = partition
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickSort
</UL>

<P><STRONG><a name="[e3]"></a>quickSort</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, main.o(i.quickSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickSort
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickSort
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collecting_IR_data
</UL>

<P><STRONG><a name="[e9]"></a>sBreak</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(i.sBreak))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sBreak &rArr; Angular_PID &rArr; micros
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>sLeftTurn</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, main.o(i.sLeftTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sLeftTurn &rArr; IRscan_LM &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLinear_PID
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCell
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ifabs
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>sRightTurn</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, main.o(i.sRightTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sRightTurn &rArr; IRscan_RM &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLinear_PID
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCell
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ifabs
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>stepAtDirection</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.stepAtDirection))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move
</UL>

<P><STRONG><a name="[ec]"></a>straightPhaseFix</STRONG> (Thumb, 582 bytes, Stack size 64 bytes, main.o(i.straightPhaseFix))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = straightPhaseFix &rArr; IRscan_RM &rArr; collecting_IR_data &rArr; quickSort &rArr;  quickSort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLinear_PID
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initAngular_PID
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;halt
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkCell
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkLED
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Linear_PID
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_RM
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRscan_LM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angular_PID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Angle
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>swap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.swap))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c3]"></a>SetSysClock</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[dc]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[db]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[df]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[de]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
